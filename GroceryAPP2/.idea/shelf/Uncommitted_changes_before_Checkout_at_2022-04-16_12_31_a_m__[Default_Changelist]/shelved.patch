Index: app/src/main/res/layout/store_product_card_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/linearLayout2\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"100dp\"\r\n        android:background=\"@drawable/layout_1\"\r\n        android:gravity=\"left|center_vertical\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n    <LinearLayout\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"0.3\"\r\n        android:gravity=\"center\"\r\n        android:orientation=\"horizontal\">\r\n        <ImageView\r\n            android:id=\"@+id/itemImage\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            app:layout_constraintDimensionRatio=\"h,122:93\"\r\n            android:background=\"#00FFFFFF\"\r\n            android:paddingLeft=\"1dp\"\r\n            app:srcCompat=\"@drawable/costco\" />\r\n    </LinearLayout>\r\n        <LinearLayout\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.5\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/productName\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:gravity=\"center\"\r\n                android:text=\"Item Name\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/productPrice\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"$\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.2\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/imageView\"\r\n                android:layout_width=\"30dp\"\r\n                android:layout_height=\"30dp\"\r\n                android:layout_gravity=\"center\"\r\n                android:background=\"#FFFFFFFF\"\r\n                android:scaleType=\"fitCenter\"\r\n                app:srcCompat=\"@drawable/next\" />\r\n        </LinearLayout>\r\n\r\n    </LinearLayout>\r\n\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/store_product_card_view.xml b/app/src/main/res/layout/store_product_card_view.xml
--- a/app/src/main/res/layout/store_product_card_view.xml	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/res/layout/store_product_card_view.xml	(date 1650083360853)
@@ -21,14 +21,15 @@
         android:layout_weight="0.3"
         android:gravity="center"
         android:orientation="horizontal">
+
         <ImageView
             android:id="@+id/itemImage"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            app:layout_constraintDimensionRatio="h,122:93"
             android:background="#00FFFFFF"
             android:paddingLeft="1dp"
-            app:srcCompat="@drawable/costco" />
+            app:layout_constraintDimensionRatio="h,122:93"
+            app:srcCompat="@drawable/layout_1" />
     </LinearLayout>
         <LinearLayout
             android:layout_width="0dp"
Index: app/src/main/java/com/example/groceryapp/StoreProductHelper/MyAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp.StoreProductHelper;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.util.Base64;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.groceryapp.AddProduct;\r\nimport com.example.groceryapp.ItemHelper.ItemHelperClass;\r\nimport com.example.groceryapp.R;\r\nimport com.example.groceryapp.StoreHelper.StoreHelperClass;\r\nimport com.example.groceryapp.UpdateProduct;\r\nimport com.example.groceryapp.shopCategory;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\n\r\npublic class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder>{\r\n    ArrayList<StoreProductHelperClass> locations;\r\n\r\n    public MyAdapter(ArrayList<StoreProductHelperClass> locations) {\r\n        this.locations = locations;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\r\n        View view = inflater.inflate(R.layout.store_product_card_view, parent, false);\r\n        return new MyViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        StoreProductHelperClass storeProductHelperClass = locations.get(position);\r\n        String itemId = storeProductHelperClass.getItemId();\r\n        String itemName = storeProductHelperClass.getItemName();\r\n        String itemStock = storeProductHelperClass.getItemStock();\r\n        String restockTime = storeProductHelperClass.getRestockTime();\r\n        String itemPrice = storeProductHelperClass.getItemPrice();\r\n        String itemCategory = storeProductHelperClass.getItemCategory();\r\n\r\n        holder.itemName.setText(itemName);\r\n        holder.itemPrice.setText(\"$ \" + itemPrice);\r\n        holder.itemImage.setImageBitmap(convertStringToBitImage(storeProductHelperClass.getItemImage()));\r\n\r\n        // jump to update page if the item was clicked\r\n        holder.itemView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(view.getContext(), UpdateProduct.class);\r\n                intent.putExtra(\"itemId\", itemId);\r\n                intent.putExtra(\"itemName\", itemName);\r\n                intent.putExtra(\"itemCategory\", itemCategory);\r\n                intent.putExtra(\"itemPrice\", itemPrice);\r\n                intent.putExtra(\"itemStock\", itemStock);\r\n                intent.putExtra(\"restockTime\", restockTime);\r\n                view.getContext().startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    // this function is used to decode the string into image\r\n    public Bitmap convertStringToBitImage(String imageString){\r\n        // decode string to image\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);\r\n        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);\r\n        return decodedImage;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return locations.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        TextView itemName;\r\n        TextView itemPrice;\r\n        ImageView itemImage;\r\n\r\n        public MyViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            itemName = itemView.findViewById(R.id.productName);\r\n            itemPrice = itemView.findViewById(R.id.productPrice);\r\n            itemImage = itemView.findViewById(R.id.itemImage);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/StoreProductHelper/MyAdapter.java b/app/src/main/java/com/example/groceryapp/StoreProductHelper/MyAdapter.java
--- a/app/src/main/java/com/example/groceryapp/StoreProductHelper/MyAdapter.java	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/java/com/example/groceryapp/StoreProductHelper/MyAdapter.java	(date 1650082234418)
@@ -3,7 +3,6 @@
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.util.Base64;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -13,14 +12,15 @@
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.example.groceryapp.AddProduct;
-import com.example.groceryapp.ItemHelper.ItemHelperClass;
 import com.example.groceryapp.R;
-import com.example.groceryapp.StoreHelper.StoreHelperClass;
 import com.example.groceryapp.UpdateProduct;
-import com.example.groceryapp.shopCategory;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.storage.FileDownloadTask;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
 
-import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 
 public class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder>{
@@ -50,7 +50,7 @@
 
         holder.itemName.setText(itemName);
         holder.itemPrice.setText("$ " + itemPrice);
-        holder.itemImage.setImageBitmap(convertStringToBitImage(storeProductHelperClass.getItemImage()));
+        loadImage(holder, storeProductHelperClass.getItemImage());
 
         // jump to update page if the item was clicked
         holder.itemView.setOnClickListener(new View.OnClickListener() {
@@ -68,13 +68,20 @@
         });
     }
 
-    // this function is used to decode the string into image
-    public Bitmap convertStringToBitImage(String imageString){
-        // decode string to image
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);
-        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
-        return decodedImage;
+    public void loadImage(MyViewHolder holder, String fileName) {
+        StorageReference storageReference = FirebaseStorage.getInstance().getReference().child("images/" + fileName);
+        try {
+            final File localFile = File.createTempFile(fileName, "image");
+            storageReference.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
+                @Override
+                public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
+                    Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
+                    holder.itemImage.setImageBitmap(bitmap);
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
Index: app/src/main/res/layout/item_card_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:weightSum=\"1\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/linearLayout2\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"100dp\"\r\n        android:background=\"@drawable/layout_1\"\r\n        android:gravity=\"center\"\r\n        android:orientation=\"horizontal\"\r\n        android:weightSum=\"1\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n    <LinearLayout\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"0.3\"\r\n        android:gravity=\"center\"\r\n        android:orientation=\"horizontal\">\r\n        <ImageView\r\n            android:id=\"@+id/itemImage\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            app:layout_constraintDimensionRatio=\"h,122:93\"\r\n            android:background=\"#00FFFFFF\"\r\n            app:srcCompat=\"@drawable/costco\" />\r\n    </LinearLayout>\r\n        <LinearLayout\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.35\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/itemName\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:gravity=\"center\"\r\n                android:text=\"Item Name\"\r\n                android:textColor=\"#3f3f3f\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/itemPrice\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"$\"\r\n                android:textColor=\"#3f3f3f\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"/>\r\n<!--                tools:layout_editor_absoluteX=\"197dp\"-->\r\n<!--                tools:layout_editor_absoluteY=\"236dp\" -->\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.35\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/quantities\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Quantities\"\r\n                android:textColor=\"#3f3f3f\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <EditText\r\n                android:id=\"@+id/number\"\r\n                android:layout_width=\"82dp\"\r\n                android:layout_height=\"40dp\"\r\n                android:ems=\"10\"\r\n                android:inputType=\"number\"\r\n                android:paddingTop=\"0dp\"\r\n                android:textColor=\"#3f3f3f\"\r\n                android:textSize=\"16sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n    </LinearLayout>\r\n\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_card_view.xml b/app/src/main/res/layout/item_card_view.xml
--- a/app/src/main/res/layout/item_card_view.xml	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/res/layout/item_card_view.xml	(date 1650083360860)
@@ -23,13 +23,14 @@
         android:layout_weight="0.3"
         android:gravity="center"
         android:orientation="horizontal">
+
         <ImageView
             android:id="@+id/itemImage"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            app:layout_constraintDimensionRatio="h,122:93"
             android:background="#00FFFFFF"
-            app:srcCompat="@drawable/costco" />
+            app:layout_constraintDimensionRatio="h,122:93"
+            app:srcCompat="@drawable/layout_1" />
     </LinearLayout>
         <LinearLayout
             android:layout_width="0dp"
Index: app/src/main/java/com/example/groceryapp/ItemHelper/MyAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp.ItemHelper;\r\n\r\nimport static android.widget.Toast.LENGTH_LONG;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Color;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Base64;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.groceryapp.Map;\r\nimport com.example.groceryapp.R;\r\nimport com.example.groceryapp.ItemHelper.ItemHelperClass;\r\nimport com.example.groceryapp.Cart;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\n\r\npublic class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\r\n\r\n    ArrayList<ItemHelperClass> locations;\r\n\r\n    public MyAdapter(ArrayList<ItemHelperClass> locations) {\r\n        this.locations = locations;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\r\n        View view = inflater.inflate(R.layout.item_card_view, parent, false);\r\n        return new MyViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        ItemHelperClass itemHelperClass = locations.get(position);\r\n        holder.itemName.setText(itemHelperClass.getItemName());\r\n        holder.itemId = itemHelperClass.getItemId();\r\n        holder.itemStock = itemHelperClass.getItemStock();\r\n        holder.restockTime = itemHelperClass.getRestockTime();\r\n        if (Double.parseDouble(holder.itemStock) < 1) {\r\n            holder.itemQuantities.setText(\"Out of Stock\");\r\n            holder.itemQuantities.setTextColor(Color.RED);\r\n            holder.itemNumber.setFocusable(false);\r\n        }\r\n        holder.itemPrice.setText(\"$ \" +itemHelperClass.getItemPrice());\r\n        holder.itemCategory = itemHelperClass.getItemCategory();\r\n        holder.itemImage.setImageBitmap(convertStringToBitImage(itemHelperClass.getItemImage()));\r\n    }\r\n\r\n    // this function is used to decode the string into image\r\n    public Bitmap convertStringToBitImage(String imageString){\r\n        // decode string to image\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);\r\n        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);\r\n        return decodedImage;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return locations.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        TextView itemName;\r\n        String itemId;\r\n        String itemStock;\r\n        String restockTime;\r\n        TextView itemPrice;\r\n        String itemCategory;\r\n        ImageView itemImage;\r\n        TextView itemQuantities;\r\n        EditText itemNumber;\r\n\r\n        public MyViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n\r\n            itemName = itemView.findViewById(R.id.itemName);\r\n            itemPrice = itemView.findViewById(R.id.itemPrice);\r\n            itemImage = itemView.findViewById(R.id.itemImage);\r\n            itemQuantities = itemView.findViewById(R.id.quantities);\r\n            itemNumber = itemView.findViewById(R.id.number);\r\n\r\n            itemQuantities.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Toast.makeText(view.getContext(), \"The next restock time for \"+itemName.getText()+\" is \"+restockTime, LENGTH_LONG).show();\r\n                }\r\n            });\r\n\r\n            itemNumber.addTextChangedListener(new TextWatcher() {\r\n                public void afterTextChanged(Editable s) {\r\n                    if (s.toString().isEmpty()) { return; }\r\n                    int temp = Integer.parseInt(s.toString());\r\n                    if (temp > Double.parseDouble(itemStock)) {\r\n                        Toast.makeText(itemView.getContext(), \"Your amount exceed the item storage, the storage for \"+itemName.getText()+\" is \"+itemStock, LENGTH_LONG).show();\r\n                        s.clear();\r\n                    }\r\n                }\r\n\r\n                public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\r\n                public void onTextChanged(CharSequence s, int start, int before, int count) {}\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/ItemHelper/MyAdapter.java b/app/src/main/java/com/example/groceryapp/ItemHelper/MyAdapter.java
--- a/app/src/main/java/com/example/groceryapp/ItemHelper/MyAdapter.java	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/java/com/example/groceryapp/ItemHelper/MyAdapter.java	(date 1650082985478)
@@ -25,8 +25,14 @@
 import com.example.groceryapp.R;
 import com.example.groceryapp.ItemHelper.ItemHelperClass;
 import com.example.groceryapp.Cart;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.storage.FileDownloadTask;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 
 public class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {
@@ -59,16 +65,23 @@
         }
         holder.itemPrice.setText("$ " +itemHelperClass.getItemPrice());
         holder.itemCategory = itemHelperClass.getItemCategory();
-        holder.itemImage.setImageBitmap(convertStringToBitImage(itemHelperClass.getItemImage()));
+        loadImage(holder, itemHelperClass.getItemImage());
     }
 
-    // this function is used to decode the string into image
-    public Bitmap convertStringToBitImage(String imageString){
-        // decode string to image
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);
-        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
-        return decodedImage;
+    public void loadImage(MyViewHolder holder, String fileName) {
+        StorageReference storageReference = FirebaseStorage.getInstance().getReference().child("images/" + fileName);
+        try {
+            final File localFile = File.createTempFile(fileName, "image");
+            storageReference.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
+                @Override
+                public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
+                    Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
+                    holder.itemImage.setImageBitmap(bitmap);
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
Index: app/src/main/res/layout/cart_card_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"100dp\"\r\n        android:weightSum=\"1\"\r\n        android:orientation=\"horizontal\"\r\n        android:background=\"@drawable/layout_1\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n    <LinearLayout\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"0.3\"\r\n        android:gravity=\"center\"\r\n        android:orientation=\"horizontal\">\r\n        <ImageView\r\n            android:id=\"@+id/itemImage\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            app:layout_constraintDimensionRatio=\"h,122:93\"\r\n            app:srcCompat=\"@drawable/costco\" />\r\n    </LinearLayout>\r\n        <LinearLayout\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.35\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/itemName\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Item Name\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#3f3f3f\"\r\n                android:gravity=\"center\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/itemPrice\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"$\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#3f3f3f\" />\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.35\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/textView18\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Quantitive:\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#3f3f3f\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/amount\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"x 0\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#3f3f3f\" />\r\n        </LinearLayout>\r\n\r\n    </LinearLayout>\r\n\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/cart_card_view.xml b/app/src/main/res/layout/cart_card_view.xml
--- a/app/src/main/res/layout/cart_card_view.xml	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/res/layout/cart_card_view.xml	(date 1650083360846)
@@ -20,12 +20,13 @@
         android:layout_weight="0.3"
         android:gravity="center"
         android:orientation="horizontal">
+
         <ImageView
             android:id="@+id/itemImage"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             app:layout_constraintDimensionRatio="h,122:93"
-            app:srcCompat="@drawable/costco" />
+            app:srcCompat="@drawable/layout_1" />
     </LinearLayout>
         <LinearLayout
             android:layout_width="0dp"
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n}\r\n\r\nandroid {\r\n    compileSdk 32\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.groceryapp\"\r\n        minSdk 22\r\n        targetSdk 32\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    buildFeatures {\r\n        viewBinding true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.appcompat:appcompat:1.4.1'\r\n    implementation 'com.google.android.material:material:1.5.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'\r\n    implementation 'com.google.android.gms:play-services-maps:18.0.2'\r\n    implementation files('libs\\\\mysql-connector-java-8.0.28.jar')\r\n    implementation files('libs\\\\jtds-1.3.1.jar')\r\n    implementation 'androidx.navigation:navigation-fragment:2.4.1'\r\n    implementation 'androidx.navigation:navigation-ui:2.4.1'\r\n    testImplementation 'junit:junit:4.+'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n\r\n\r\n    implementation 'com.google.android.gms:play-services-location:19.0.1'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/build.gradle	(date 1650080399598)
@@ -1,5 +1,6 @@
 plugins {
     id 'com.android.application'
+    id 'com.google.gms.google-services'
 }
 
 android {
@@ -40,6 +41,7 @@
     implementation files('libs\\jtds-1.3.1.jar')
     implementation 'androidx.navigation:navigation-fragment:2.4.1'
     implementation 'androidx.navigation:navigation-ui:2.4.1'
+    implementation 'com.google.firebase:firebase-storage:20.0.1'
     testImplementation 'junit:junit:4.+'
     androidTestImplementation 'androidx.test.ext:junit:1.1.3'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
Index: app/src/main/java/com/example/groceryapp/AddProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.util.Base64;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\n\r\npublic class AddProduct extends AppCompatActivity{\r\n    ImageView back, productImage, imageTest;\r\n    EditText productNameText, priceText, quantityText, restockTimeText;\r\n    String productCategory;\r\n    DatePickerDialog picker;\r\n    Button saveBtn;\r\n    int SELECT_PICTURE = 200;\r\n    SharedPreferences sharedPreferences;\r\n    private String sharedStoreId;\r\n\r\n    // create array of Strings and store name of the categories\r\n    List<String> categories = new ArrayList<>();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_product);\r\n\r\n        categories.add(0, \"Choose Category\");\r\n        categories.add(\"Product\");\r\n        categories.add(\"Meat & Seafood\");\r\n        categories.add(\"Dairy & Eggs\");\r\n        categories.add(\"Snacks\");\r\n        categories.add(\"Others\");\r\n\r\n        productNameText = (EditText) findViewById(R.id.updateProductName);\r\n        priceText = (EditText) findViewById(R.id.addProductPrice);\r\n        quantityText = (EditText) findViewById(R.id.addProductQuantity);\r\n        saveBtn = (Button) findViewById(R.id.addProductBtn);\r\n        productImage = (ImageView) findViewById(R.id.addProductImage);\r\n\r\n        // move back if back button clicked\r\n        back = (ImageView) findViewById(R.id.addProductBackView);\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        // Extract store id from local\r\n        sharedPreferences = getSharedPreferences(\"StorePrefs\", Context.MODE_PRIVATE);\r\n        sharedStoreId = sharedPreferences.getString(\"storeId\", null);\r\n\r\n        // Take the instance of Spinner and apply OnItemSelectedListener on it which\r\n        // tells which item of spinner is clicked\r\n        Spinner spin = findViewById(R.id.categoriesSpinner);\r\n\r\n        // Create the instance of ArrayAdapter\r\n        ArrayAdapter ad\r\n                = new ArrayAdapter(\r\n                this,\r\n                android.R.layout.simple_spinner_item,\r\n                categories);\r\n\r\n        // set simple layout resource file for each item of spinner\r\n        ad.setDropDownViewResource(\r\n                android.R.layout\r\n                        .simple_spinner_dropdown_item);\r\n\r\n        // Set the ArrayAdapter (ad) data on the Spinner which binds data to spinner\r\n        spin.setAdapter(ad);\r\n        spin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\r\n                if (adapterView.getItemAtPosition(i).equals(\"Choose Category\")){\r\n                    productCategory = \"\";\r\n                }else{\r\n                    productCategory = adapterView.getItemAtPosition(i).toString();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> adapterView) {\r\n\r\n            }\r\n        });\r\n\r\n        // pick image from gallery\r\n        productImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // create an instance of the intent of the type image\r\n                Intent i = new Intent();\r\n                i.setType(\"image/*\");\r\n                i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n                // pass the constant to compare it with the returned requestCode\r\n                startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n            }\r\n        });\r\n\r\n        // create a date picker of restock time\r\n        restockTimeText = (EditText) findViewById(R.id.restockTime);\r\n        restockTimeText.setInputType(InputType.TYPE_NULL);\r\n        restockTimeText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final Calendar cldr = Calendar.getInstance();\r\n                int day = cldr.get(Calendar.DAY_OF_MONTH);\r\n                int month = cldr.get(Calendar.MONTH);\r\n                int year = cldr.get(Calendar.YEAR);\r\n\r\n                // date picker dialog\r\n                picker = new DatePickerDialog(AddProduct.this,\r\n                        new DatePickerDialog.OnDateSetListener() {\r\n                            @Override\r\n                            public void onDateSet(DatePicker datePicker, int i, int i1, int i2) {\r\n                                String monthOfYear = \"\";\r\n                                String dayOfMonth = \"\";\r\n                                if (i1 < 9){\r\n                                    monthOfYear = \"0\" + (i1 + 1);\r\n                                }else{\r\n                                    monthOfYear = \"\" + (i1 + 1);\r\n                                }\r\n                                if (i2 < 10){\r\n                                    dayOfMonth = \"0\" + i2;\r\n                                }else{\r\n                                    dayOfMonth = \"\" + i2;\r\n                                }\r\n                                restockTimeText.setText(i + \"-\" + monthOfYear + \"-\" + dayOfMonth);\r\n                            }\r\n                        }, year, month, day);\r\n\r\n                // set maximum date to be selected as today\r\n                picker.getDatePicker().setMinDate(cldr.getTimeInMillis());\r\n                picker.show();\r\n            }\r\n        });\r\n\r\n        // upload data to database if save button clicked\r\n        saveBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // check the correction\r\n                if (checkCorrection()){\r\n                    // get the encoded image string\r\n                    String imageString = convertProductImageToString();\r\n                    // Update product data to database\r\n                    String query = (\"insert into Products(ItemName, ItemStock, RestockTime, ItemPrice, ItemCategory, ItemImage, RetailerId) \" + \"values ('\"\r\n                            + productNameText.getText() + \"', '\"\r\n                            + new Float(quantityText.getText().toString()) + \"', '\"\r\n                            + restockTimeText.getText() + \"', '\"\r\n                            + new Float(priceText.getText().toString()) + \"', '\"\r\n                            + productCategory + \"', '\"\r\n                            + imageString + \"', '\"\r\n                            + sharedStoreId +\"')\");\r\n\r\n                    int temp = DBUtil.Update(query);\r\n                    if (temp == 1) {\r\n                        // Success\r\n                        Toast.makeText(AddProduct.this,\"Success!\", Toast.LENGTH_LONG).show();\r\n                        // Jump to previous page\r\n                        finish();\r\n                    } else {\r\n                        // Error\r\n                        Toast.makeText(AddProduct.this,\"Error!\", Toast.LENGTH_LONG).show();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // this function is used to encode the image into string\r\n    public String convertProductImageToString(){\r\n        //encode image to base64 string\r\n        BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();\r\n        Bitmap bitmap = bitmapDrawable.getBitmap();\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG,0, byteArrayOutputStream);\r\n        byte[] bytes = byteArrayOutputStream.toByteArray();\r\n        return Base64.encodeToString(bytes , Base64.DEFAULT);\r\n    }\r\n\r\n    public boolean checkCorrection(){\r\n        if (!productNameText.getText().toString().matches(\"\")\r\n                && !priceText.getText().toString().matches(\"\")\r\n                && !quantityText.getText().toString().matches(\"\")\r\n                && !restockTimeText.getText().toString().matches(\"\")\r\n                && !productCategory.matches(\"\")\r\n                && productImage != null){\r\n            return true;\r\n        }else{\r\n            Toast.makeText(this, \"Please complete all information\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // this function is triggered when\r\n    // the Select Image Button is clicked\r\n    void imageChooser() {\r\n        // create an instance of the\r\n        // intent of the type image\r\n        Intent i = new Intent();\r\n        i.setType(\"image/*\");\r\n        i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n        // pass the constant to compare it\r\n        // with the returned requestCode\r\n        startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n    }\r\n\r\n    // this function is triggered when user\r\n    // selects the image from the imageChooser\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == RESULT_OK) {\r\n            // compare the resultCode with the\r\n            // SELECT_PICTURE constant\r\n            if (requestCode == SELECT_PICTURE) {\r\n                // Get the url of the image from data\r\n                Uri selectedImageUri = data.getData();\r\n                if (null != selectedImageUri) {\r\n                    // update the preview image in the layout\r\n                    productImage.setImageURI(selectedImageUri);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/AddProduct.java b/app/src/main/java/com/example/groceryapp/AddProduct.java
--- a/app/src/main/java/com/example/groceryapp/AddProduct.java	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/java/com/example/groceryapp/AddProduct.java	(date 1650081972138)
@@ -3,13 +3,16 @@
 import androidx.appcompat.app.AppCompatActivity;
 
 import android.app.DatePickerDialog;
+import android.app.appsearch.StorageInfo;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Environment;
 import android.text.InputType;
 import android.util.Base64;
 import android.view.View;
@@ -22,13 +25,23 @@
 import android.widget.Spinner;
 import android.widget.Toast;
 
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.storage.FileDownloadTask;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
+import com.google.firebase.storage.UploadTask;
+
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
+import java.util.UUID;
 
 public class AddProduct extends AppCompatActivity{
-    ImageView back, productImage, imageTest;
+    ImageView back, productImage;
     EditText productNameText, priceText, quantityText, restockTimeText;
     String productCategory;
     DatePickerDialog picker;
@@ -36,6 +49,7 @@
     int SELECT_PICTURE = 200;
     SharedPreferences sharedPreferences;
     private String sharedStoreId;
+    Uri selectedImageUri;
 
     // create array of Strings and store name of the categories
     List<String> categories = new ArrayList<>();
@@ -65,7 +79,6 @@
                 finish();
             }
         });
-
         // Extract store id from local
         sharedPreferences = getSharedPreferences("StorePrefs", Context.MODE_PRIVATE);
         sharedStoreId = sharedPreferences.getString("storeId", null);
@@ -162,8 +175,8 @@
             public void onClick(View view) {
                 // check the correction
                 if (checkCorrection()){
-                    // get the encoded image string
-                    String imageString = convertProductImageToString();
+                    // upload image to firebase
+                    String fileName = uploadImage();
                     // Update product data to database
                     String query = ("insert into Products(ItemName, ItemStock, RestockTime, ItemPrice, ItemCategory, ItemImage, RetailerId) " + "values ('"
                             + productNameText.getText() + "', '"
@@ -171,7 +184,7 @@
                             + restockTimeText.getText() + "', '"
                             + new Float(priceText.getText().toString()) + "', '"
                             + productCategory + "', '"
-                            + imageString + "', '"
+                            + fileName + "', '"
                             + sharedStoreId +"')");
 
                     int temp = DBUtil.Update(query);
@@ -189,15 +202,13 @@
         });
     }
 
-    // this function is used to encode the image into string
-    public String convertProductImageToString(){
-        //encode image to base64 string
-        BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();
-        Bitmap bitmap = bitmapDrawable.getBitmap();
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        bitmap.compress(Bitmap.CompressFormat.PNG,0, byteArrayOutputStream);
-        byte[] bytes = byteArrayOutputStream.toByteArray();
-        return Base64.encodeToString(bytes , Base64.DEFAULT);
+    public String uploadImage(){
+        // generate a unique string as the file name
+        String fileName = UUID.randomUUID().toString();
+
+        StorageReference storageReference = FirebaseStorage.getInstance().getReference("images/" + fileName);
+        storageReference.putFile(selectedImageUri);
+        return fileName;
     }
 
     public boolean checkCorrection(){
@@ -237,7 +248,7 @@
             // SELECT_PICTURE constant
             if (requestCode == SELECT_PICTURE) {
                 // Get the url of the image from data
-                Uri selectedImageUri = data.getData();
+                selectedImageUri = data.getData();
                 if (null != selectedImageUri) {
                     // update the preview image in the layout
                     productImage.setImageURI(selectedImageUri);
Index: app/src/main/java/com/example/groceryapp/CartHelper/MyAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp.CartHelper;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.util.Base64;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\n\r\nimport com.example.groceryapp.R;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\n\r\npublic class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder>{\r\n    ArrayList<CartHelperClass> locations;\r\n\r\n    public MyAdapter(ArrayList<CartHelperClass> locations) {\r\n        this.locations = locations;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\r\n        View view = inflater.inflate(R.layout.cart_card_view, null, false);\r\n        return new MyViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        CartHelperClass cartHelperClass = locations.get(position);\r\n        holder.itemName.setText(cartHelperClass.getItemName());\r\n        holder.itemId = cartHelperClass.getItemId();\r\n        holder.itemStock = cartHelperClass.getItemStock();\r\n        holder.restockTime = cartHelperClass.getRestockTime();\r\n        holder.itemPrice.setText(\"$ \" +cartHelperClass.getItemPrice());\r\n        holder.itemCategory = cartHelperClass.getItemCategory();\r\n        holder.itemImage.setImageBitmap(convertStringToBitImage(cartHelperClass.getItemImage()));\r\n        holder.itemAmount.setText(\"x \" +cartHelperClass.getItemAmount());\r\n    }\r\n\r\n    // this function is used to decode the string into image\r\n    public Bitmap convertStringToBitImage(String imageString){\r\n        // decode string to image\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);\r\n        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);\r\n        return decodedImage;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return locations.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        TextView itemName;\r\n        String itemId;\r\n        String itemStock;\r\n        String restockTime;\r\n        TextView itemPrice;\r\n        String itemCategory;\r\n        ImageView itemImage;\r\n        TextView itemAmount;\r\n\r\n        public MyViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            itemName = itemView.findViewById(R.id.itemName);\r\n            itemPrice = itemView.findViewById(R.id.itemPrice);\r\n            itemImage = itemView.findViewById(R.id.itemImage);\r\n            itemAmount = itemView.findViewById(R.id.amount);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/CartHelper/MyAdapter.java b/app/src/main/java/com/example/groceryapp/CartHelper/MyAdapter.java
--- a/app/src/main/java/com/example/groceryapp/CartHelper/MyAdapter.java	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/java/com/example/groceryapp/CartHelper/MyAdapter.java	(date 1650082985512)
@@ -14,8 +14,14 @@
 
 
 import com.example.groceryapp.R;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.storage.FileDownloadTask;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 
 public class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder>{
@@ -42,17 +48,24 @@
         holder.restockTime = cartHelperClass.getRestockTime();
         holder.itemPrice.setText("$ " +cartHelperClass.getItemPrice());
         holder.itemCategory = cartHelperClass.getItemCategory();
-        holder.itemImage.setImageBitmap(convertStringToBitImage(cartHelperClass.getItemImage()));
+        loadImage(holder, cartHelperClass.getItemImage());
         holder.itemAmount.setText("x " +cartHelperClass.getItemAmount());
     }
 
-    // this function is used to decode the string into image
-    public Bitmap convertStringToBitImage(String imageString){
-        // decode string to image
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);
-        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
-        return decodedImage;
+    public void loadImage(MyViewHolder holder, String fileName) {
+        StorageReference storageReference = FirebaseStorage.getInstance().getReference().child("images/" + fileName);
+        try {
+            final File localFile = File.createTempFile(fileName, "image");
+            storageReference.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
+                @Override
+                public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
+                    Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
+                    holder.itemImage.setImageBitmap(bitmap);
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
Index: app/src/main/java/com/example/groceryapp/UpdateProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.util.Base64;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.groceryapp.StoreProductHelper.StoreProductHelperClass;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class UpdateProduct extends AppCompatActivity{\r\n    ImageView back, productImage;\r\n    Button delete;\r\n    EditText productNameText, priceText, quantityText, restockTimeText;\r\n    String productCategory;\r\n    DatePickerDialog picker;\r\n    Button saveBtn;\r\n    int SELECT_PICTURE = 200;\r\n    SharedPreferences sharedPreferences;\r\n    private String sharedStoreId;\r\n    private String itemId;\r\n\r\n    // create array of Strings and store name of the categories\r\n    List<String> categories = new ArrayList<>();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_update_product);\r\n\r\n        categories.add(\"Product\");\r\n        categories.add(\"Meat & Seafood\");\r\n        categories.add(\"Dairy & Eggs\");\r\n        categories.add(\"Snacks\");\r\n        categories.add(\"Others\");\r\n\r\n        // retrieve data from previous page\r\n        Intent intent = getIntent();\r\n        itemId = intent.getStringExtra(\"itemId\");\r\n        String previousItemName = intent.getStringExtra(\"itemName\");\r\n        String previousItemCategory = intent.getStringExtra(\"itemCategory\");\r\n        String previousItemPrice = intent.getStringExtra(\"itemPrice\");\r\n        String previousItemStock = intent.getStringExtra(\"itemStock\");\r\n        String previousItemRestockTime = intent.getStringExtra(\"restockTime\");\r\n\r\n        productNameText = (EditText) findViewById(R.id.updateProductName);\r\n        priceText = (EditText) findViewById(R.id.updateProductPrice);\r\n        quantityText = (EditText) findViewById(R.id.updateProductQuantity);\r\n        saveBtn = (Button) findViewById(R.id.updateProductBtn);\r\n        productImage = (ImageView) findViewById(R.id.updateProductImage);\r\n        restockTimeText = (EditText) findViewById(R.id.updateRestockTime);\r\n\r\n        // set default values for each edit text\r\n        productNameText.setText(previousItemName);\r\n        priceText.setText(previousItemPrice);\r\n        quantityText.setText(previousItemStock);\r\n        restockTimeText.setText(previousItemRestockTime);\r\n        // retrieve the previous image from database and display\r\n        productImage.setImageBitmap(convertStringToBitImage(getImageString(itemId)));\r\n\r\n        // move back if back button clicked\r\n        back = (ImageView) findViewById(R.id.updateProductBackView);\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        // delete the product if delete button clicked\r\n        delete = (Button) findViewById(R.id.deleteBtn);\r\n        delete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String query = (\"delete from Products where id = \" + itemId);\r\n                updateDB(query);\r\n            }\r\n        });\r\n\r\n        // Extract store id from local\r\n        sharedPreferences = getSharedPreferences(\"StorePrefs\", Context.MODE_PRIVATE);\r\n        sharedStoreId = sharedPreferences.getString(\"storeId\", null);\r\n\r\n        // Take the instance of Spinner and apply OnItemSelectedListener on it which\r\n        // tells which item of spinner is clicked\r\n        Spinner spin = findViewById(R.id.updateCategoriesSpinner);\r\n\r\n        // Create the instance of ArrayAdapter\r\n        ArrayAdapter ad\r\n                = new ArrayAdapter(\r\n                this,\r\n                android.R.layout.simple_spinner_item,\r\n                categories);\r\n\r\n        // set simple layout resource file for each item of spinner\r\n        ad.setDropDownViewResource(\r\n                android.R.layout\r\n                        .simple_spinner_dropdown_item);\r\n\r\n        // Set the ArrayAdapter (ad) data on the Spinner which binds data to spinner\r\n        spin.setAdapter(ad);\r\n        if (categories.contains(previousItemCategory)){\r\n            int position = ad.getPosition(previousItemCategory);\r\n            spin.setSelection(position);\r\n        }\r\n\r\n        spin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\r\n                productCategory = adapterView.getItemAtPosition(i).toString();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> adapterView) {\r\n\r\n            }\r\n        });\r\n\r\n        // pick image from gallery\r\n        productImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // create an instance of the intent of the type image\r\n                Intent i = new Intent();\r\n                i.setType(\"image/*\");\r\n                i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n                // pass the constant to compare it with the returned requestCode\r\n                startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n            }\r\n        });\r\n\r\n        // create a date picker of restock time\r\n        restockTimeText = (EditText) findViewById(R.id.updateRestockTime);\r\n        restockTimeText.setInputType(InputType.TYPE_NULL);\r\n        restockTimeText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final Calendar cldr = Calendar.getInstance();\r\n                int day = cldr.get(Calendar.DAY_OF_MONTH);\r\n                int month = cldr.get(Calendar.MONTH);\r\n                int year = cldr.get(Calendar.YEAR);\r\n\r\n                // date picker dialog\r\n                picker = new DatePickerDialog(UpdateProduct.this,\r\n                        new DatePickerDialog.OnDateSetListener() {\r\n                            @Override\r\n                            public void onDateSet(DatePicker datePicker, int i, int i1, int i2) {\r\n                                String monthOfYear = \"\";\r\n                                String dayOfMonth = \"\";\r\n                                if (i1 < 9){\r\n                                    monthOfYear = \"0\" + (i1 + 1);\r\n                                }else{\r\n                                    monthOfYear = \"\" + (i1 + 1);\r\n                                }\r\n                                if (i2 < 10){\r\n                                    dayOfMonth = \"0\" + i2;\r\n                                }else{\r\n                                    dayOfMonth = \"\" + i2;\r\n                                }\r\n                                restockTimeText.setText(i + \"-\" + monthOfYear + \"-\" + dayOfMonth);\r\n                            }\r\n                        }, year, month, day);\r\n\r\n                // set maximum date to be selected as today\r\n                picker.getDatePicker().setMinDate(cldr.getTimeInMillis());\r\n                picker.show();\r\n            }\r\n        });\r\n\r\n        // update data to database if save button clicked\r\n        saveBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // check the correction\r\n                if (checkCorrection()){\r\n                    // get the encoded image string\r\n                    String imageString = convertProductImageToString();\r\n                    // Update product data to database\r\n                    String query = (\"update Products set \"\r\n                            + \"ItemName = '\" + productNameText.getText() + \"', \"\r\n                            + \"ItemStock = '\" + new Float(quantityText.getText().toString()) + \"', \"\r\n                            + \"RestockTime = '\" + restockTimeText.getText() + \"', \"\r\n                            + \"ItemPrice = '\" + new Float(priceText.getText().toString()) + \"', \"\r\n                            + \"ItemCategory = '\" + productCategory + \"', \"\r\n                            + \"ItemImage = '\" + imageString + \"', \"\r\n                            + \"RetailerId = '\" + sharedStoreId + \"' where id = \" + itemId + \";\"\r\n                            );\r\n                     updateDB(query);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // this function is used to encode the image into string\r\n    public String convertProductImageToString(){\r\n        //encode image to base64 string\r\n        BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();\r\n        Bitmap bitmap = bitmapDrawable.getBitmap();\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG,10, byteArrayOutputStream);\r\n        byte[] bytes = byteArrayOutputStream.toByteArray();\r\n        return Base64.encodeToString(bytes , Base64.DEFAULT);\r\n    }\r\n\r\n    public void updateDB(String query){\r\n        int temp = DBUtil.Update(query);\r\n        if (temp == 1) {\r\n            // Success\r\n            Toast.makeText(UpdateProduct.this,\"Success!\", Toast.LENGTH_LONG).show();\r\n            // Jump to previous page\r\n            finish();\r\n        } else {\r\n            // Error\r\n            Toast.makeText(UpdateProduct.this,\"Error!\", Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    public boolean checkCorrection(){\r\n        if (!productNameText.getText().toString().matches(\"\")\r\n                && !priceText.getText().toString().matches(\"\")\r\n                && !quantityText.getText().toString().matches(\"\")\r\n                && !restockTimeText.getText().toString().matches(\"\")\r\n                && !productCategory.matches(\"\")\r\n                && productImage != null){\r\n            return true;\r\n        }else{\r\n            Toast.makeText(this, \"Please complete all information\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // this function is used to retrieve the image string from database\r\n    public String getImageString(String itemId){\r\n        // Request product list from db\r\n        ArrayList<ArrayList<String>> productList = DBUtil.Query(\r\n                \"select ItemImage from Products where id = \" + itemId);\r\n        if (productList.size() != 0) {\r\n            return productList.get(0).get(0);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // this function is used to decode the string into image\r\n    public Bitmap convertStringToBitImage(String imageString){\r\n        // decode string to image\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);\r\n        return BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);\r\n    }\r\n\r\n    // this function is triggered when\r\n    // the Select Image Button is clicked\r\n    void imageChooser() {\r\n        // create an instance of the\r\n        // intent of the type image\r\n        Intent i = new Intent();\r\n        i.setType(\"image/*\");\r\n        i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n        // pass the constant to compare it\r\n        // with the returned requestCode\r\n        startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n    }\r\n\r\n    // this function is triggered when user\r\n    // selects the image from the imageChooser\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == RESULT_OK) {\r\n            // compare the resultCode with the\r\n            // SELECT_PICTURE constant\r\n            if (requestCode == SELECT_PICTURE) {\r\n                // Get the url of the image from data\r\n                Uri selectedImageUri = data.getData();\r\n                if (null != selectedImageUri) {\r\n                    // update the preview image in the layout\r\n                    productImage.setImageURI(selectedImageUri);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/UpdateProduct.java b/app/src/main/java/com/example/groceryapp/UpdateProduct.java
--- a/app/src/main/java/com/example/groceryapp/UpdateProduct.java	(revision 6208773ef07394501939aee847b75a58fe87a4a5)
+++ b/app/src/main/java/com/example/groceryapp/UpdateProduct.java	(date 1650082985500)
@@ -23,12 +23,20 @@
 import android.widget.Spinner;
 import android.widget.Toast;
 
+import com.example.groceryapp.StoreProductHelper.MyAdapter;
 import com.example.groceryapp.StoreProductHelper.StoreProductHelperClass;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.storage.FileDownloadTask;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
 import java.util.Calendar;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.UUID;
 
 public class UpdateProduct extends AppCompatActivity{
     ImageView back, productImage;
@@ -41,6 +49,7 @@
     SharedPreferences sharedPreferences;
     private String sharedStoreId;
     private String itemId;
+    Uri selectedImageUri;
 
     // create array of Strings and store name of the categories
     List<String> categories = new ArrayList<>();
@@ -78,7 +87,8 @@
         quantityText.setText(previousItemStock);
         restockTimeText.setText(previousItemRestockTime);
         // retrieve the previous image from database and display
-        productImage.setImageBitmap(convertStringToBitImage(getImageString(itemId)));
+//        productImage.setImageBitmap(convertStringToBitImage(getImageName(itemId)));
+        loadImage(getImageName(itemId));
 
         // move back if back button clicked
         back = (ImageView) findViewById(R.id.updateProductBackView);
@@ -195,33 +205,56 @@
             public void onClick(View view) {
                 // check the correction
                 if (checkCorrection()){
-                    // get the encoded image string
-                    String imageString = convertProductImageToString();
-                    // Update product data to database
-                    String query = ("update Products set "
-                            + "ItemName = '" + productNameText.getText() + "', "
-                            + "ItemStock = '" + new Float(quantityText.getText().toString()) + "', "
-                            + "RestockTime = '" + restockTimeText.getText() + "', "
-                            + "ItemPrice = '" + new Float(priceText.getText().toString()) + "', "
-                            + "ItemCategory = '" + productCategory + "', "
-                            + "ItemImage = '" + imageString + "', "
-                            + "RetailerId = '" + sharedStoreId + "' where id = " + itemId + ";"
-                            );
-                     updateDB(query);
+                    String query;
+                    if (null != selectedImageUri) {
+                        String fileName = updateImage();
+                        // Update product data to database
+                        query = ("update Products set "
+                                + "ItemName = '" + productNameText.getText() + "', "
+                                + "ItemStock = '" + new Float(quantityText.getText().toString()) + "', "
+                                + "RestockTime = '" + restockTimeText.getText() + "', "
+                                + "ItemPrice = '" + new Float(priceText.getText().toString()) + "', "
+                                + "ItemCategory = '" + productCategory + "', "
+                                + "ItemImage = '" + fileName + "', "
+                                + "RetailerId = '" + sharedStoreId + "' where id = " + itemId + ";");
+                    }else{
+                        query = ("update Products set "
+                                + "ItemName = '" + productNameText.getText() + "', "
+                                + "ItemStock = '" + new Float(quantityText.getText().toString()) + "', "
+                                + "RestockTime = '" + restockTimeText.getText() + "', "
+                                + "ItemPrice = '" + new Float(priceText.getText().toString()) + "', "
+                                + "ItemCategory = '" + productCategory + "', "
+                                + "RetailerId = '" + sharedStoreId + "' where id = " + itemId + ";");
+                    }
+                    updateDB(query);
                 }
             }
         });
     }
 
-    // this function is used to encode the image into string
-    public String convertProductImageToString(){
-        //encode image to base64 string
-        BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();
-        Bitmap bitmap = bitmapDrawable.getBitmap();
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        bitmap.compress(Bitmap.CompressFormat.PNG,10, byteArrayOutputStream);
-        byte[] bytes = byteArrayOutputStream.toByteArray();
-        return Base64.encodeToString(bytes , Base64.DEFAULT);
+    public String updateImage(){
+        // generate a unique string as the file name
+        String fileName = UUID.randomUUID().toString();
+
+        StorageReference storageReference = FirebaseStorage.getInstance().getReference("images/" + fileName);
+        storageReference.putFile(selectedImageUri);
+        return fileName;
+    }
+
+    public void loadImage(String fileName) {
+        StorageReference storageReference = FirebaseStorage.getInstance().getReference().child("images/" + fileName);
+        try {
+            final File localFile = File.createTempFile(fileName, "image");
+            storageReference.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
+                @Override
+                public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
+                    Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
+                    productImage.setImageBitmap(bitmap);
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     public void updateDB(String query){
@@ -252,7 +285,7 @@
     }
 
     // this function is used to retrieve the image string from database
-    public String getImageString(String itemId){
+    public String getImageName(String itemId){
         // Request product list from db
         ArrayList<ArrayList<String>> productList = DBUtil.Query(
                 "select ItemImage from Products where id = " + itemId);
@@ -293,7 +326,7 @@
             // SELECT_PICTURE constant
             if (requestCode == SELECT_PICTURE) {
                 // Get the url of the image from data
-                Uri selectedImageUri = data.getData();
+                selectedImageUri = data.getData();
                 if (null != selectedImageUri) {
                     // update the preview image in the layout
                     productImage.setImageURI(selectedImageUri);
