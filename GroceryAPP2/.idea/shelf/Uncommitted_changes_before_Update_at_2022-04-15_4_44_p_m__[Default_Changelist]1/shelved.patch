Index: app/src/main/java/com/example/groceryapp/AddProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.util.Base64;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\n\r\npublic class AddProduct extends AppCompatActivity{\r\n    ImageView back, productImage, imageTest;\r\n    EditText productNameText, priceText, quantityText, restockTimeText;\r\n    String productCategory;\r\n    DatePickerDialog picker;\r\n    Button saveBtn;\r\n    int SELECT_PICTURE = 200;\r\n    SharedPreferences sharedPreferences;\r\n    private String sharedStoreId;\r\n\r\n    // create array of Strings and store name of the categories\r\n    List<String> categories = new ArrayList<>();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_product);\r\n\r\n        categories.add(0, \"Choose Category\");\r\n        categories.add(\"Product\");\r\n        categories.add(\"Meat & Seafood\");\r\n        categories.add(\"Dairy & Eggs\");\r\n        categories.add(\"Snacks\");\r\n        categories.add(\"Others\");\r\n\r\n        productNameText = (EditText) findViewById(R.id.updateProductName);\r\n        priceText = (EditText) findViewById(R.id.addProductPrice);\r\n        quantityText = (EditText) findViewById(R.id.addProductQuantity);\r\n        saveBtn = (Button) findViewById(R.id.addProductBtn);\r\n        productImage = (ImageView) findViewById(R.id.addProductImage);\r\n\r\n        // move back if back button clicked\r\n        back = (ImageView) findViewById(R.id.addProductBackView);\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        // Extract store id from local\r\n        sharedPreferences = getSharedPreferences(\"StorePrefs\", Context.MODE_PRIVATE);\r\n        sharedStoreId = sharedPreferences.getString(\"storeId\", null);\r\n\r\n        // Take the instance of Spinner and apply OnItemSelectedListener on it which\r\n        // tells which item of spinner is clicked\r\n        Spinner spin = findViewById(R.id.categoriesSpinner);\r\n\r\n        // Create the instance of ArrayAdapter\r\n        ArrayAdapter ad\r\n                = new ArrayAdapter(\r\n                this,\r\n                android.R.layout.simple_spinner_item,\r\n                categories);\r\n\r\n        // set simple layout resource file for each item of spinner\r\n        ad.setDropDownViewResource(\r\n                android.R.layout\r\n                        .simple_spinner_dropdown_item);\r\n\r\n        // Set the ArrayAdapter (ad) data on the Spinner which binds data to spinner\r\n        spin.setAdapter(ad);\r\n        spin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\r\n                if (adapterView.getItemAtPosition(i).equals(\"Choose Category\")){\r\n                    productCategory = \"\";\r\n                }else{\r\n                    productCategory = adapterView.getItemAtPosition(i).toString();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> adapterView) {\r\n\r\n            }\r\n        });\r\n\r\n        // pick image from gallery\r\n        productImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // create an instance of the intent of the type image\r\n                Intent i = new Intent();\r\n                i.setType(\"image/*\");\r\n                i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n                // pass the constant to compare it with the returned requestCode\r\n                startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n            }\r\n        });\r\n\r\n        // create a date picker of restock time\r\n        restockTimeText = (EditText) findViewById(R.id.restockTime);\r\n        restockTimeText.setInputType(InputType.TYPE_NULL);\r\n        restockTimeText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final Calendar cldr = Calendar.getInstance();\r\n                int day = cldr.get(Calendar.DAY_OF_MONTH);\r\n                int month = cldr.get(Calendar.MONTH);\r\n                int year = cldr.get(Calendar.YEAR);\r\n\r\n                // date picker dialog\r\n                picker = new DatePickerDialog(AddProduct.this,\r\n                        new DatePickerDialog.OnDateSetListener() {\r\n                            @Override\r\n                            public void onDateSet(DatePicker datePicker, int i, int i1, int i2) {\r\n                                String monthOfYear = \"\";\r\n                                String dayOfMonth = \"\";\r\n                                if (i1 < 9){\r\n                                    monthOfYear = \"0\" + (i1 + 1);\r\n                                }else{\r\n                                    monthOfYear = \"\" + (i1 + 1);\r\n                                }\r\n                                if (i2 < 10){\r\n                                    dayOfMonth = \"0\" + i2;\r\n                                }else{\r\n                                    dayOfMonth = \"\" + i2;\r\n                                }\r\n                                restockTimeText.setText(i + \"-\" + monthOfYear + \"-\" + dayOfMonth);\r\n                            }\r\n                        }, year, month, day);\r\n\r\n                // set maximum date to be selected as today\r\n                picker.getDatePicker().setMinDate(cldr.getTimeInMillis());\r\n                picker.show();\r\n            }\r\n        });\r\n\r\n        // upload data to database if save button clicked\r\n        saveBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // check the correction\r\n                if (checkCorrection()){\r\n                    // get the encoded image string\r\n                    String imageString = convertProductImageToString();\r\n                    // Update product data to database\r\n                    String query = (\"insert into Products(ItemName, ItemStock, RestockTime, ItemPrice, ItemCategory, ItemImage, RetailerId) \" + \"values ('\"\r\n                            + productNameText.getText() + \"', '\"\r\n                            + new Float(quantityText.getText().toString()) + \"', '\"\r\n                            + restockTimeText.getText() + \"', '\"\r\n                            + new Float(priceText.getText().toString()) + \"', '\"\r\n                            + productCategory + \"', '\"\r\n                            + imageString + \"', '\"\r\n                            + sharedStoreId +\"')\");\r\n\r\n                    int temp = DBUtil.Update(query);\r\n                    if (temp == 1) {\r\n                        // Success\r\n                        Toast.makeText(AddProduct.this,\"Success!\", Toast.LENGTH_LONG).show();\r\n                        // Jump to previous page\r\n                        finish();\r\n                    } else {\r\n                        // Error\r\n                        Toast.makeText(AddProduct.this,\"Error!\", Toast.LENGTH_LONG).show();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // this function is used to encode the image into string\r\n    public String convertProductImageToString(){\r\n        //encode image to base64 string\r\n        BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();\r\n        Bitmap bitmap = bitmapDrawable.getBitmap();\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG,0, byteArrayOutputStream);\r\n        byte[] bytes = byteArrayOutputStream.toByteArray();\r\n        return Base64.encodeToString(bytes , Base64.DEFAULT);\r\n    }\r\n\r\n    public boolean checkCorrection(){\r\n        if (!productNameText.getText().toString().matches(\"\")\r\n                && !priceText.getText().toString().matches(\"\")\r\n                && !quantityText.getText().toString().matches(\"\")\r\n                && !restockTimeText.getText().toString().matches(\"\")\r\n                && !productCategory.matches(\"\")\r\n                && productImage != null){\r\n            return true;\r\n        }else{\r\n            Toast.makeText(this, \"Please complete all information\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // this function is triggered when\r\n    // the Select Image Button is clicked\r\n    void imageChooser() {\r\n        // create an instance of the\r\n        // intent of the type image\r\n        Intent i = new Intent();\r\n        i.setType(\"image/*\");\r\n        i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n        // pass the constant to compare it\r\n        // with the returned requestCode\r\n        startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n    }\r\n\r\n    // this function is triggered when user\r\n    // selects the image from the imageChooser\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == RESULT_OK) {\r\n            // compare the resultCode with the\r\n            // SELECT_PICTURE constant\r\n            if (requestCode == SELECT_PICTURE) {\r\n                // Get the url of the image from data\r\n                Uri selectedImageUri = data.getData();\r\n                if (null != selectedImageUri) {\r\n                    // update the preview image in the layout\r\n                    productImage.setImageURI(selectedImageUri);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/AddProduct.java b/app/src/main/java/com/example/groceryapp/AddProduct.java
--- a/app/src/main/java/com/example/groceryapp/AddProduct.java	
+++ b/app/src/main/java/com/example/groceryapp/AddProduct.java	
@@ -10,6 +10,7 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Environment;
 import android.text.InputType;
 import android.util.Base64;
 import android.view.View;
@@ -23,6 +24,8 @@
 import android.widget.Toast;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
@@ -36,6 +39,7 @@
     int SELECT_PICTURE = 200;
     SharedPreferences sharedPreferences;
     private String sharedStoreId;
+    String DirName = "/GroceryAppImage";
 
     // create array of Strings and store name of the categories
     List<String> categories = new ArrayList<>();
@@ -200,6 +204,34 @@
         return Base64.encodeToString(bytes , Base64.DEFAULT);
     }
 
+    public void createDictionary(){
+        File imageDirectory = new File("/sdcard" + DirName + "/");
+        imageDirectory.mkdirs();
+    }
+
+    public boolean checkDictionaryExists(){
+        File direct = new File(Environment.getExternalStorageDirectory() + DirName);
+        if(!direct.exists()){
+            return true;
+        }
+        return false;
+    }
+
+    public void saveImage(Bitmap image, String fileName){
+        File file = new File(new File("/sdcard" + DirName + "/"), fileName);
+        if (file.exists()) {
+            file.delete();
+        }
+        try {
+            FileOutputStream out = new FileOutputStream(file);
+            image.compress(Bitmap.CompressFormat.JPEG, 0, out);
+            out.flush();
+            out.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
     public boolean checkCorrection(){
         if (!productNameText.getText().toString().matches("")
                 && !priceText.getText().toString().matches("")
Index: app/src/main/java/com/example/groceryapp/UpdateProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.groceryapp;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.util.Base64;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.groceryapp.StoreProductHelper.StoreProductHelperClass;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class UpdateProduct extends AppCompatActivity{\r\n    ImageView back, productImage;\r\n    Button delete;\r\n    EditText productNameText, priceText, quantityText, restockTimeText;\r\n    String productCategory;\r\n    DatePickerDialog picker;\r\n    Button saveBtn;\r\n    int SELECT_PICTURE = 200;\r\n    SharedPreferences sharedPreferences;\r\n    private String sharedStoreId;\r\n    private String itemId;\r\n\r\n    // create array of Strings and store name of the categories\r\n    List<String> categories = new ArrayList<>();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_update_product);\r\n\r\n        categories.add(\"Product\");\r\n        categories.add(\"Meat & Seafood\");\r\n        categories.add(\"Dairy & Eggs\");\r\n        categories.add(\"Snacks\");\r\n        categories.add(\"Others\");\r\n\r\n        // retrieve data from previous page\r\n        Intent intent = getIntent();\r\n        itemId = intent.getStringExtra(\"itemId\");\r\n        String previousItemName = intent.getStringExtra(\"itemName\");\r\n        String previousItemCategory = intent.getStringExtra(\"itemCategory\");\r\n        String previousItemPrice = intent.getStringExtra(\"itemPrice\");\r\n        String previousItemStock = intent.getStringExtra(\"itemStock\");\r\n        String previousItemRestockTime = intent.getStringExtra(\"restockTime\");\r\n\r\n        productNameText = (EditText) findViewById(R.id.updateProductName);\r\n        priceText = (EditText) findViewById(R.id.updateProductPrice);\r\n        quantityText = (EditText) findViewById(R.id.updateProductQuantity);\r\n        saveBtn = (Button) findViewById(R.id.updateProductBtn);\r\n        productImage = (ImageView) findViewById(R.id.updateProductImage);\r\n        restockTimeText = (EditText) findViewById(R.id.updateRestockTime);\r\n\r\n        // set default values for each edit text\r\n        productNameText.setText(previousItemName);\r\n        priceText.setText(previousItemPrice);\r\n        quantityText.setText(previousItemStock);\r\n        restockTimeText.setText(previousItemRestockTime);\r\n        // retrieve the previous image from database and display\r\n        productImage.setImageBitmap(convertStringToBitImage(getImageString(itemId)));\r\n\r\n        // move back if back button clicked\r\n        back = (ImageView) findViewById(R.id.updateProductBackView);\r\n        back.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        // delete the product if delete button clicked\r\n        delete = (Button) findViewById(R.id.deleteBtn);\r\n        delete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                String query = (\"delete from Products where id = \" + itemId);\r\n                updateDB(query);\r\n            }\r\n        });\r\n\r\n        // Extract store id from local\r\n        sharedPreferences = getSharedPreferences(\"StorePrefs\", Context.MODE_PRIVATE);\r\n        sharedStoreId = sharedPreferences.getString(\"storeId\", null);\r\n\r\n        // Take the instance of Spinner and apply OnItemSelectedListener on it which\r\n        // tells which item of spinner is clicked\r\n        Spinner spin = findViewById(R.id.updateCategoriesSpinner);\r\n\r\n        // Create the instance of ArrayAdapter\r\n        ArrayAdapter ad\r\n                = new ArrayAdapter(\r\n                this,\r\n                android.R.layout.simple_spinner_item,\r\n                categories);\r\n\r\n        // set simple layout resource file for each item of spinner\r\n        ad.setDropDownViewResource(\r\n                android.R.layout\r\n                        .simple_spinner_dropdown_item);\r\n\r\n        // Set the ArrayAdapter (ad) data on the Spinner which binds data to spinner\r\n        spin.setAdapter(ad);\r\n        if (categories.contains(previousItemCategory)){\r\n            int position = ad.getPosition(previousItemCategory);\r\n            spin.setSelection(position);\r\n        }\r\n\r\n        spin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\r\n                productCategory = adapterView.getItemAtPosition(i).toString();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> adapterView) {\r\n\r\n            }\r\n        });\r\n\r\n        // pick image from gallery\r\n        productImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // create an instance of the intent of the type image\r\n                Intent i = new Intent();\r\n                i.setType(\"image/*\");\r\n                i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n                // pass the constant to compare it with the returned requestCode\r\n                startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n            }\r\n        });\r\n\r\n        // create a date picker of restock time\r\n        restockTimeText = (EditText) findViewById(R.id.updateRestockTime);\r\n        restockTimeText.setInputType(InputType.TYPE_NULL);\r\n        restockTimeText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final Calendar cldr = Calendar.getInstance();\r\n                int day = cldr.get(Calendar.DAY_OF_MONTH);\r\n                int month = cldr.get(Calendar.MONTH);\r\n                int year = cldr.get(Calendar.YEAR);\r\n\r\n                // date picker dialog\r\n                picker = new DatePickerDialog(UpdateProduct.this,\r\n                        new DatePickerDialog.OnDateSetListener() {\r\n                            @Override\r\n                            public void onDateSet(DatePicker datePicker, int i, int i1, int i2) {\r\n                                String monthOfYear = \"\";\r\n                                String dayOfMonth = \"\";\r\n                                if (i1 < 9){\r\n                                    monthOfYear = \"0\" + (i1 + 1);\r\n                                }else{\r\n                                    monthOfYear = \"\" + (i1 + 1);\r\n                                }\r\n                                if (i2 < 10){\r\n                                    dayOfMonth = \"0\" + i2;\r\n                                }else{\r\n                                    dayOfMonth = \"\" + i2;\r\n                                }\r\n                                restockTimeText.setText(i + \"-\" + monthOfYear + \"-\" + dayOfMonth);\r\n                            }\r\n                        }, year, month, day);\r\n\r\n                // set maximum date to be selected as today\r\n                picker.getDatePicker().setMinDate(cldr.getTimeInMillis());\r\n                picker.show();\r\n            }\r\n        });\r\n\r\n        // update data to database if save button clicked\r\n        saveBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // check the correction\r\n                if (checkCorrection()){\r\n                    // get the encoded image string\r\n                    String imageString = convertProductImageToString();\r\n                    // Update product data to database\r\n                    String query = (\"update Products set \"\r\n                            + \"ItemName = '\" + productNameText.getText() + \"', \"\r\n                            + \"ItemStock = '\" + new Float(quantityText.getText().toString()) + \"', \"\r\n                            + \"RestockTime = '\" + restockTimeText.getText() + \"', \"\r\n                            + \"ItemPrice = '\" + new Float(priceText.getText().toString()) + \"', \"\r\n                            + \"ItemCategory = '\" + productCategory + \"', \"\r\n                            + \"ItemImage = '\" + imageString + \"', \"\r\n                            + \"RetailerId = '\" + sharedStoreId + \"' where id = \" + itemId + \";\"\r\n                            );\r\n                     updateDB(query);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // this function is used to encode the image into string\r\n    public String convertProductImageToString(){\r\n        //encode image to base64 string\r\n        BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();\r\n        Bitmap bitmap = bitmapDrawable.getBitmap();\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG,10, byteArrayOutputStream);\r\n        byte[] bytes = byteArrayOutputStream.toByteArray();\r\n        return Base64.encodeToString(bytes , Base64.DEFAULT);\r\n    }\r\n\r\n    public void updateDB(String query){\r\n        int temp = DBUtil.Update(query);\r\n        if (temp == 1) {\r\n            // Success\r\n            Toast.makeText(UpdateProduct.this,\"Success!\", Toast.LENGTH_LONG).show();\r\n            // Jump to previous page\r\n            finish();\r\n        } else {\r\n            // Error\r\n            Toast.makeText(UpdateProduct.this,\"Error!\", Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    public boolean checkCorrection(){\r\n        if (!productNameText.getText().toString().matches(\"\")\r\n                && !priceText.getText().toString().matches(\"\")\r\n                && !quantityText.getText().toString().matches(\"\")\r\n                && !restockTimeText.getText().toString().matches(\"\")\r\n                && !productCategory.matches(\"\")\r\n                && productImage != null){\r\n            return true;\r\n        }else{\r\n            Toast.makeText(this, \"Please complete all information\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // this function is used to retrieve the image string from database\r\n    public String getImageString(String itemId){\r\n        // Request product list from db\r\n        ArrayList<ArrayList<String>> productList = DBUtil.Query(\r\n                \"select ItemImage from Products where id = \" + itemId);\r\n        if (productList.size() != 0) {\r\n            return productList.get(0).get(0);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // this function is used to decode the string into image\r\n    public Bitmap convertStringToBitImage(String imageString){\r\n        // decode string to image\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        byte[] imageBytes = Base64.decode(imageString, Base64.DEFAULT);\r\n        return BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);\r\n    }\r\n\r\n    // this function is triggered when\r\n    // the Select Image Button is clicked\r\n    void imageChooser() {\r\n        // create an instance of the\r\n        // intent of the type image\r\n        Intent i = new Intent();\r\n        i.setType(\"image/*\");\r\n        i.setAction(Intent.ACTION_GET_CONTENT);\r\n\r\n        // pass the constant to compare it\r\n        // with the returned requestCode\r\n        startActivityForResult(Intent.createChooser(i, \"Select Picture\"), SELECT_PICTURE);\r\n    }\r\n\r\n    // this function is triggered when user\r\n    // selects the image from the imageChooser\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == RESULT_OK) {\r\n            // compare the resultCode with the\r\n            // SELECT_PICTURE constant\r\n            if (requestCode == SELECT_PICTURE) {\r\n                // Get the url of the image from data\r\n                Uri selectedImageUri = data.getData();\r\n                if (null != selectedImageUri) {\r\n                    // update the preview image in the layout\r\n                    productImage.setImageURI(selectedImageUri);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/groceryapp/UpdateProduct.java b/app/src/main/java/com/example/groceryapp/UpdateProduct.java
--- a/app/src/main/java/com/example/groceryapp/UpdateProduct.java	
+++ b/app/src/main/java/com/example/groceryapp/UpdateProduct.java	
@@ -219,7 +219,7 @@
         BitmapDrawable bitmapDrawable = (BitmapDrawable) productImage.getDrawable();
         Bitmap bitmap = bitmapDrawable.getBitmap();
         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        bitmap.compress(Bitmap.CompressFormat.PNG,10, byteArrayOutputStream);
+        bitmap.compress(Bitmap.CompressFormat.PNG,0, byteArrayOutputStream);
         byte[] bytes = byteArrayOutputStream.toByteArray();
         return Base64.encodeToString(bytes , Base64.DEFAULT);
     }
